var init = function() {
    setPeriods();
    report();
};

var setPeriods = function() {
    data.periodos = [];
    setPrimeiroBimestre();
    setSegundoBimestre();
    setPrimeiroTrimestre();
    setTerceiroBimestre();
    setQuartoBimestre();
    setMediaAnual();
    setMediaFinal();
    setSubtitleColumn();
};

var setPrimeiroBimestre = function() {
    var period = getPeriod(4537);
    var columns = [];
    columns.push(createColumn('Média', 'M', period));
    columns.push(createColumn('Faltas', 'F', period));
    data.periodos.push(createPeriod(period.idPeriod, period.name, 1, 1, 1, columns));
};

var setSegundoBimestre = function() {
    var period = getPeriod(5010);
    var columns = [];
    columns.push(createColumn('Média', 'M', period));
    columns.push(createColumn('Faltas', 'F', period));
    data.periodos.push(createPeriod(period.idPeriod, period.name, 2, 2, 1, columns));
};

var setPrimeiroTrimestre = function() {
    var period = getPeriod(6252);
    var columns = [];
    columns.push(createColumn('Média', 'M', period, calculoMediaPrimeiroSemestreAnterior));
    columns.push(createColumn('Recuperação Semestral', 'M', period));
    columns.push(createColumn('Média', 'M', period, calculoMediaPrimeiroSemestreDefinitiva));
    data.periodos.push(createPeriod(period.idPeriod, period.name, 3, 0, 1, columns));
};

var setTerceiroBimestre = function() {
    var period = getPeriod(5011);
    var columns = [];
    columns.push(createColumn('Média', 'M', period));
    columns.push(createColumn('Faltas', 'F', period));
    data.periodos.push(createPeriod(period.idPeriod, period.name, 4, 3, 2, columns));
};

var setQuartoBimestre = function() {
    var period = getPeriod(5012);
    var columns = [];
    columns.push(createColumn('Média', 'M', period));
    columns.push(createColumn('Faltas', 'F', period));
    data.periodos.push(createPeriod(period.idPeriod, period.name, 5, 4, 2, columns));
};

var setMediaAnual = function() {
    var period = data.enrollments[0].averageDefinitions[0];
    var columns = [];
    columns.push(createColumn('Média', 'M', period, calculoMediaAnualAnterior));
    columns.push(createColumn('Prova Final', 'M', period));
    columns.push(createColumn('Média','M', period, calculoMediaAnualDefinitiva));
    data.periodos.push(createPeriod(0, period.name, 6, 0, 2, columns));
};

var setMediaFinal = function() {
    var period = getPeriod(6253);
    var columns = [];
    columns.push(createColumn('Média', 'M', period, calculoMediaFinalAnterior));
    columns.push(createColumn('Recuperação Final', 'M', period));
    columns.push(createColumn('Média', 'M', period, calculoMediaFinalDefinitiva));
    data.periodos.push(createPeriod(period.idPeriod, 'Média Final', 7, 1, 1, columns));
};

var getPeriod = function(idPeriod) {
    var periodSelected = {};
    data.enrollments[0].periods.forEach(function(period) {
        if(period.idPeriod === idPeriod) { periodSelected = period };
    });
    return periodSelected;
};

var createPeriod = function(idPeriod, name, id, bimestre, semestre, columns) {
    return { 'idPeriod': idPeriod, 'name': name, 'id': id, 'bimestre': bimestre, 'trimestre': semestre, 'columns': columns }
};

var getSubject = function(idPeriod) {
    var subjectSelected = {};
    return subjectSelected;
};

var createColumn = function(name, type, period, callback) {
    return { 'name': name, 'type': type, 'value': null, 'period': period, 'callback': callback };
    //return { 'name': name, 'type': type, 'value': Math.random() * 10, 'period': period };
}

var setSubtitleColumn = function() {
    data.sutitleColumn = [];
    data.periodos.forEach(function(period) {
        period.columns.forEach(function(column) {
            data.sutitleColumn.push(column)
        });
    });
};

var calculoMediaPrimeiroSemestreAnterior = function(subject) {
    var primeiroBimestre = subject.columns[0];
    var segundoBimestre = subject.columns[2];
    if(!primeiroBimestre.value || !segundoBimestre.value) return null;
    var media = 0;
    if(primeiroBimestre.type === 'M') { media += primeiroBimestre.value; }
    if(segundoBimestre.type === 'M') { media += segundoBimestre.value; }
    return media / 2;
};

var calculoMediaPrimeiroSemestreDefinitiva = function(subject) {
    var mediaAnterior = subject.columns[4];
    var mediaSemestre = subject.columns[5];
    if(!mediaAnterior.value || !mediaSemestre.value) return null;
    var media = 0;
    if(mediaAnterior.value >= mediaSemestre.value) { media = mediaAnterior.value; }
    else { 
        if(mediaSemestre.value >= 7) { media = 7; }
        else { media = mediaSemestre.value; }
    }
    return media;
};

var calculoMediaAnualAnterior = function(subject) {
    var primeiroSemestre = subject.columns[6];
    var terceiroBimestre = subject.columns[7];
    var quartoBimestre = subject.columns[9];
    if(!primeiroSemestre.value || !terceiroBimestre.value || !quartoBimestre.value) return null;
    var media = 0;
    if(primeiroSemestre.type === 'M') { media += primeiroSemestre.value * 2; }
    if(terceiroBimestre.type === 'M') { media += terceiroBimestre.value; }
    if(quartoBimestre.type === 'M') { media += quartoBimestre.value; }
    return media / 4;
};

var calculoMediaAnualDefinitiva = function(subject) {
    var mediaAnterior = subject.columns[11];
    var mediaAnual = subject.columns[12];
    if(!mediaAnterior.value || !mediaAnual.value) return null;
    var media = 0;
    if(mediaAnterior.value >= mediaAnual.value) { media = mediaAnterior.value; }
    else { 
        if(mediaAnual.value >= 7) { media = 7; }
        else { media = mediaAnual.value; }
    }
    return media;
};

var calculoMediaFinalAnterior = function(subject) {
    var mediaAnual = subject.columns[13];
    if(!mediaAnual.value) return null;
    return mediaAnual.value;
};

var calculoMediaFinalDefinitiva = function(subject) {
    var mediaAnterior = subject.columns[14];
    var mediaFinal = subject.columns[15];
    if(!mediaAnterior.value || !mediaFinal.value) return null;
    var media = 0;
    if(mediaAnterior.value >= mediaFinal.value) { media = mediaAnterior.value; }
    else { 
        if(mediaFinal.value >= 7) { media = 7; }
        else { media = mediaFinal.value; }
    }
    return media;
};

var setMedia = function(column, subject, periodo) {
    if(column.type === 'M') { 
        if(column.callback) { 
            column.value = column.callback(subject); 
        } else {
            var average = subject.periodAverages[periodo.idPeriod];
            if(average && average.value) { column.value = average.value; }
            //else { column.value = Math.ceil(Math.random() * 10); }
        }
    }  
};

var setFrequencia = function(column, subject, periodo) {
    if(column.type === 'F') { 
        var attendance = subject.attendance[periodo.idPeriod];
        if(attendance) { column.value = attendance.absence; }
        //else { column.value = Math.floor(Math.random() * 10); }
    }
};

var report = function() {
    data.enrollments.forEach(function(enrollment) {
        enrollment.subjects.forEach(function(subject) {
            subject.columns = [];
            data.periodos.forEach(function(periodo) {
                periodo.columns.forEach(function(column) {
                    var columnSubject = angular.copy(column);
                    setMedia(columnSubject, subject, periodo);
                    setFrequencia(columnSubject, subject, periodo);
                    subject.columns.push(columnSubject);
                });
            });
        });
    });
};

init();

console.log(data);
return data;