var init = function() {
    data.modulos = [];
    data.periodos = [];
    data.subPeriodos = [];
    setDataAtual();
    setPeriodos();
    setSubPeriodos();
    setTotal();
    setInstituicoes();
    setPrimeiroPeriodo();
    setUltimoPeriodo();
    report();
};

var setDataAtual = function() {
    data.dataAtual = new Date();  
};

var setTotal = function() {
    data.total = { 'periodos': getPeriodos(createPeriodoByEnrollment) };
};

var setInstituicoes = function() {
    data.instituicoes = { 'periodos': getPeriodos(createPeriodoByInstitution) };
};

var setPrimeiroPeriodo = function() {
    if(!data.enrollmentRecords || !data.enrollmentRecords.length) return;
    data.primeiroPeriodo = data.enrollmentRecords[0];
    var id = getPeriodoIdByName(data.primeiroPeriodo);
    data.primeiroPeriodo.periodo = getPeriodoById(id);
};

var setUltimoPeriodo = function() {
    if(!data.enrollmentRecords || !data.enrollmentRecords.length) return;
    data.ultimoPeriodo = data.enrollmentRecords[data.enrollmentRecords.length -1];
    var id = getPeriodoIdByName(data.ultimoPeriodo);
    data.ultimoPeriodo.periodo = getPeriodoById(id);
};

var setPeriodos = function() {
    data.periodos.push(createPeriodo(1, '1° ANO'));
    data.periodos.push(createPeriodo(2, '2° ANO'));
    data.periodos.push(createPeriodo(3, '3° ANO'));
    data.periodos.push(createPeriodo(4, '4° ANO'));
    data.periodos.push(createPeriodo(5, '5° ANO'));
    data.periodos.push(createPeriodo(6, '6° ANO'));
    data.periodos.push(createPeriodo(7, '7° ANO'));
    data.periodos.push(createPeriodo(8, '8° ANO'));
    data.periodos.push(createPeriodo(9, '9° ANO'));
};

var getPeriodoById = function(id) {
    var result;
    data.periodos.forEach(function(periodo) {
        if(periodo.id.toString() === id) { result = periodo; }
    });
    return result;
}

var createPeriodo = function(id, name) {
    return { 'id': id, 'name': name, 'subPeriodos': ['NC','CH'] };
};

var setBaseNacionalComum = function() {
    var modulo = createBase("Base Nacional Comum");
    modulo.disciplinas = [];
    var portugues = getDisciplina("Língua Portuguesa");
    if(portugues) { modulo.disciplinas.push(portugues); }
    var matematica = getDisciplina("Matemática");
    if(matematica) { modulo.disciplinas.push(matematica); }
    var arte = getDisciplina("Arte");
    if(arte) { modulo.disciplinas.push(arte); }
    var educacaoFisica = getDisciplina("Educação Física");
    if(educacaoFisica) { modulo.disciplinas.push(educacaoFisica); }
    var geografia = getDisciplina("Geografia");
    if(geografia) { modulo.disciplinas.push(geografia); }
    var historia = getDisciplina("História");
    if(historia) { modulo.disciplinas.push(historia); }
    var ciencias = getDisciplina("Ciências");
    if(ciencias) { modulo.disciplinas.push(ciencias); }
    data.modulos.push(modulo);
};

var setBaseDisersificada = function() {
    var modulo = createBase("Base Diversificada");
    modulo.disciplinas = [];
    var ingles = getDisciplina("Língua Estrangeira Moderna (Inglês)");
    if(ingles) { modulo.disciplinas.push(ingles); }
    var religiao = getDisciplina("Educação Religiosa");
    if(religiao) { modulo.disciplinas.push(religiao); }
    var filosofia = getDisciplina("Filosofia");
    if(filosofia) { modulo.disciplinas.push(filosofia); }
    var redacao = getDisciplina("Redação");
    if(redacao) { modulo.disciplinas.push(redacao); }
    var espanhol = getDisciplina("Língua Estrangeira Moderna (Espanhol)");
    if(espanhol) { modulo.disciplinas.push(espanhol); }
    data.modulos.push(modulo);
};

var getDisciplina = function(idDisciplina) {
    var disciplina;
    data.enrollmentRecords.forEach(function(enrollment) {
        var id = getPeriodoIdByName(enrollment);
        data.instituicoes.periodos[id] = createPeriodoByInstitution(enrollment);
        enrollment.subjects.forEach(function(subject) {
            if(subject.subjectName === idDisciplina) {
                if(!disciplina) { disciplina = createDisciplina(subject); }
                enrollment.cargaHoraria = subject.workload;
                enrollment.frequencia = subject.attendance;
                enrollment.media = subject.average;
                disciplina.periodos[id] = createPeriodoByEnrollment(enrollment);
                if(!data.total.periodos[id]) { data.total.periodos[id] = { 'diasLetivos': 0, 'faltas': 0, 'cargaHoraria': 0 }; }
                data.total.periodos[id].cargaHoraria += disciplina.periodos[id].cargaHoraria;
            }
        });
    });
    return disciplina;
};

var getPeriodoIdByName = function(enrollment) {
    var id = enrollment.moduleName.substring(0,1);
    if(isNaN(id)) return 0;
    return id;
};

var createBase = function(name) {
    var modulo = {};
    modulo.nome = name;
    modulo.disciplinas = [];
    return modulo;
};

var createDisciplina = function(subject) {
    return {
        'id': null,
        'nome': subject.subjectName,
        'periodos': getPeriodos(createPeriodoByEnrollment)
    }  
};

var getPeriodos = function(callback) {
    var periodos = {};
    data.periodos.forEach(function(periodo) {
        periodos[periodo.id] = callback();
    });
    return periodos;
};

var createPeriodoByEnrollment = function(enrollment) {
    return {
        'id': (enrollment && enrollment.idEnrollment) || null,
        'nome': (enrollment && enrollment.moduleName) || null,
        'finalizada': (enrollment && enrollment.finished) || null,
        'cargaHoraria': (enrollment && enrollment.cargaHoraria) || null,
        'media': (enrollment && enrollment.media) || null,
        'frequencia': (enrollment && enrollment.frequencia) || null
    }  
};

var createPeriodoByInstitution = function(enrollment) {
    return {
        'id': (enrollment && enrollment.idInstitution) || null,
        'nome': (enrollment && enrollment.institutionName) || null,
        'ano': (enrollment && enrollment.calendarName) || null,
        'cidade': (enrollment && enrollment.institutionCity) || null,
        'uf': (enrollment && enrollment.institutionState) || null
    }  
};

var setFiliacao = function() {
    data.person.pai = getRelationship('FATHER');
    data.person.mae = getRelationship('MOTHER');
};

var getRelationship = function(type) {
    var person = {};
    data.person.relationships.forEach(function(relationship) {
        if(relationship.type === type) { person = relationship.person; }
    });  
    return person;
};

var setSubPeriodos = function() {
    data.periodos.forEach(function(periodo) {
        periodo.subPeriodos.forEach(function(subPeriodo) {
            data.subPeriodos.push(createSubPeriodo(subPeriodo, periodo.id));        
        });
    });
};

var createSubPeriodo = function(name, periodoId) {
    var type = name === 'NC' ? 'media' : 'cargaHoraria';
    return { 'name': name, 'periodoId': periodoId, 'type': type }
}

var report = function() {
    setBaseNacionalComum();
    setBaseDisersificada();
    setFiliacao();
};

init();

console.log(data);
return data;